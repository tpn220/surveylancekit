import webapp2
import jinja2
import os
from google.appengine.ext import db
from google.appengine.api import users
import categories
import surveyusers
import items
import votes
import logging
import xml.etree.ElementTree as ET

jinja_environment = jinja2.Environment(
    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)))


#the module that displays the different categories belonging to a user, and various functions that the user can perform, such as editting and deleting the category
#as well as adding new categories and exporting from existing categories in the form of an XML file

class ManageCategory(webapp2.RequestHandler):
    
    #renders the list of all categories belonging to the logged in user
    def rendering(self, user):
        parent_categories = db.GqlQuery('SELECT * FROM category where creator = \'%s\'' %user.nickname())
                
        template_values = {
                           'user' : user.nickname(),
                           'log_out_url' :  users.create_logout_url("/"),
                           'parent_categories' : parent_categories
                           }
        template = jinja_environment.get_template('managecategory.html')
        self.response.out.write(template.render(template_values))
                
    def post(self):
        user = users.get_current_user()
        new_cat_name = self.request.get('newcatname', None)
        item_name = self.request.get('newitemname', None)
        import_cat_path = self.request.get('importcatpath', None)
        rename_type = self.request.get('renametype', None)
        if rename_type is not None:
            if rename_type == 'renameitem':
                cat_name = self.request.get('category', None)
                old_item_name = self.request.get('item', None)
                rename_item_name = self.request.get('renameitem', None)
                self.renameItem(user, cat_name, old_item_name, rename_item_name)
                self.editCategory(cat_name, user)
        else:       
            if import_cat_path is None:
                if item_name is None:
                    if new_cat_name is not None: #new category is to be added
                        check_if_cat_exists_query = db.GqlQuery('SELECT * FROM category WHERE creator = \'%s\' AND name = \'%s\'' %(user.nickname(), new_cat_name))
                        check_if_cat_exists = check_if_cat_exists_query.get()
                        if not check_if_cat_exists: #checks if the category already exists in the datastore, if not then adds it
                            new_category = categories.category(name=new_cat_name, creator=user.nickname())
                            new_category.put()
                        self.rendering(user)
                else:
                    category_name = self.request.get('cat_name', None) #new item to be added
                    check_if_item_exists_query = db.GqlQuery('SELECT * FROM item WHERE name = \'%s\' AND creator = \'%s\' AND category = \'%s\'' %(item_name, user.nickname(), category_name))
                    check_if_item_exists = check_if_item_exists_query.get()
                    if not check_if_item_exists: #checks if the category already has that item, if not then adds it
                        new_item = items.item(name=item_name, creator=user.nickname(), category=category_name)
                        new_item.put()
                    self.editCategory(category_name, user)
            else: #Existing category is to be imported from the given file
                tree=ET.parse(self.request.POST.multi['importcatpath'].file.read())
                root = tree.getroot()
                names = root.findall('NAME')
                for name in names:
                    import_cat_name = name.text
                    items_list = []
                    root_items = root.findall('ITEM/NAME')
                    for item in root_items:
                        import_item_name = item.text
                        #logging.debug("new list %s" %item.text)
                        items_list.append(import_item_name)
                    self.parseCategoryFromXML(user, import_cat_name, items_list)
                del tree
    
    #parses the given category details and makes changes/ adds new category accordingly
    def parseCategoryFromXML(self, user, cat_name, items_list):
        cat_to_parse_query = db.GqlQuery('SELECT * FROM category WHERE creator = \'%s\' AND name = \'%s\'' %(user.nickname(), cat_name))
        cat_to_parse = cat_to_parse_query.get()
        if cat_to_parse: #replace old category
            self.replaceCategory(user, cat_name, items_list)
        else: #create new category
            new_category = categories.category(name=cat_name, creator=user.nickname())
            new_category.put()
            for item in items_list:
                new_item = items.item(name=item, creator=user.nickname(), category=cat_name)
                new_item.put()
                
        self.rendering(user)
     
    #if category already exists, keep the common items, delete the ones in the previous version that are not there in the new
    #and add those that are present in the new version 
    def replaceCategory(self, user, cat_name, items_list):
        current_items = []
        current_list_items_query = db.GqlQuery('SELECT * FROM item WHERE creator = \'%s\' AND category = \'%s\'' %(user.nickname(), cat_name))
        for item_name in current_list_items_query:
            #logging.debug("current list %s" %item_name.name)
            current_items.append(item_name.name)
            
        for item_name in current_items:
            if item_name not in items_list: #items in the previous version not present in the new (to be deleted)
                #logging.debug("delete %s" %item_name)
                self.deleteItem(user, cat_name, item_name)
        
        for item_name in items_list:
            if item_name not in current_items: #items in the new version not present in the old (to be added)
                #logging.debug("add %s" %item_name)
                new_item = items.item(name=item_name, creator=user.nickname(), category=cat_name)
                new_item.put()
                         
    
    def get(self):       
        user = users.get_current_user()
          
        if user:
            function_type = self.request.get('function', None)
            cat_name = self.request.get('cat_name', None)
            item_name = self.request.get('item_name', None)
            parent_user = surveyusers.surveyuser.get_by_key_name(user.user_id())
            
            if item_name is None: #functions refer to categories as a whole
                if function_type == 'edit': #category is to be edited to add new items or delete/rename them
                    self.editCategory(cat_name, user)
                else:
                    if function_type == 'delete': #category is to be deleted, so delete ALL items and votes associated (if present)
                        cat_to_delete_query = db.GqlQuery('SELECT * FROM category WHERE creator = \'%s\' AND name = \'%s\'' %(user.nickname(), cat_name))
                        items_cat_to_delete_query = db.GqlQuery('SELECT * FROM item WHERE creator = \'%s\' AND category = \'%s\'' %(user.nickname(), cat_name))
                        votes_to_delete_query = db.GqlQuery('SELECT * FROM vote WHERE creator = \'%s\' AND category = \'%s\'' %(user.nickname(), cat_name))
                        votes_to_delete = votes_to_delete_query.get()
                        cat_to_delete = cat_to_delete_query.get()
                        items_cat_to_delete = items_cat_to_delete_query.get()
                        if cat_to_delete:
                            cat_to_delete.delete()
                        if items_cat_to_delete:
                            for item in items_cat_to_delete_query:
                                item.delete()
                        if votes_to_delete:
                            for vote in votes_to_delete_query:
                                vote.delete()
                        
                
                    self.rendering(user)
            else:#functions refer to items in a category
                if function_type == 'rename': #item is to be renamed
                    self.renderRenameItemPage(user, cat_name, item_name)
                elif function_type == 'delete': #item is to be deleted
                    self.deleteItem(user, cat_name, item_name)
                    self.editCategory(cat_name, user)
        else:
            self.redirect(users.create_login_url(self.request.uri))
            
            
    def renderRenameItemPage(self, user, cat_name, item_name):
        template_values = {
                           'category' : cat_name,
                           'item' : item_name
                           }
        template = jinja_environment.get_template('renameitem.html')
        self.response.out.write(template.render(template_values))
    
    #function to rename the item in the datastore
    def renameItem(self, user, cat_name, old_item_name, rename_item_name):
        item_to_rename_query = db.GqlQuery('SELECT * FROM item WHERE name = \'%s\' AND creator = \'%s\' AND category = \'%s\'' %(old_item_name, user.nickname(), cat_name))
        item_to_rename = item_to_rename_query.get()
        item_to_rename.name = rename_item_name
        item_to_rename.put()
        votes_to_rename_winner_query = db.GqlQuery('SELECT * FROM vote WHERE creator = \'%s\' AND category = \'%s\' AND winner = \'%s\'' %(user.nickname(), cat_name, old_item_name))        
        votes_to_rename_loser_query = db.GqlQuery('SELECT * FROM vote WHERE creator = \'%s\' AND category = \'%s\' AND loser = \'%s\'' %(user.nickname(), cat_name, old_item_name))
        for vote in votes_to_rename_winner_query:
            vote.winner = rename_item_name
            vote.put()
        for vote in votes_to_rename_loser_query:
            vote.loser = rename_item_name
            vote.put()
   
   #function to delete the item in the datastore, along with ALL votes associated(if any)         
    def deleteItem(self, user, cat_name, item_name):
        item_to_delete_query = db.GqlQuery('SELECT * FROM item WHERE name = \'%s\' AND creator = \'%s\' AND category = \'%s\'' %(item_name, user.nickname(), cat_name))
        item_to_delete = item_to_delete_query.get()
        votes_to_delete_winner_query = db.GqlQuery('SELECT * FROM vote WHERE creator = \'%s\' AND category = \'%s\' AND winner = \'%s\'' %(user.nickname(), cat_name, item_name))        
        votes_to_delete_loser_query = db.GqlQuery('SELECT * FROM vote WHERE creator = \'%s\' AND category = \'%s\' AND loser = \'%s\'' %(user.nickname(), cat_name, item_name))
        if item_to_delete:
            item_to_delete.delete()
        for votes in votes_to_delete_winner_query:
            votes.delete()
        for votes in votes_to_delete_loser_query:
            votes.delete()
            
    #displays the list of all categories with the option to perform a function on them
    def editCategory(self, cat_name, user):
        category_items = db.GqlQuery('SELECT * FROM item WHERE creator = \'%s\' AND category = \'%s\'' %(user.nickname(), cat_name))
        
        template_values = {
                           'category' : cat_name,
                           'category_items' : category_items
                           }
        template = jinja_environment.get_template('editcategory.html')
        self.response.out.write(template.render(template_values))
    
            
app = webapp2.WSGIApplication([('/manage_category.*', ManageCategory)],
                              debug=True)

if __name__ == '__main__':
    pass